package io.github.mayhewsw.classifier.lbjava;

import io.github.mayhewsw.classifier.Candidate;
import java.util.*;


discrete% Words(Candidate c) <-
{
//    sense "first" : c.tokens.get(0);
//    sense "last" : c.tokens.get(c.tokens.size()-1);

    //for(int i = 0; i < c.tokens.size(); i++){
    //    sense c.tokens.get(i);
    //}
}

discrete HasPunc(Candidate c) <-
{
    return c.haspunc();
}

discrete% Contexts(Candidate c) <-
{
    Iterator iter = c.contexts.keySet().iterator();
    while(iter.hasNext()){
        String ctx = (String) iter.next();
        int frequency = c.contexts.get(ctx);
        sense ctx ;
    }
}

discrete NumTokens(Candidate c) <-
{
    return c.tokens.size();
}

discrete GoodCandidate(Candidate c) <- { return c.isgood; }


discrete CandClassifier(Candidate c)  <-
learn GoodCandidate
  using Contexts,NumTokens,HasPunc

  with new SparseNetworkLearner(new SparseAveragedPerceptron(.1, 0, 20))

end

